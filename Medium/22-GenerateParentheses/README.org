#+TITLE: Generate Parentheses
#+FILETAGS: :string:backtracking:

* Problem
[[https://leetcode.com/problems/generate-parentheses/solution/][Leetcode Link]]
** Directions
#+BEGIN_QUOTE
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:
[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

#+END_QUOTE
* Notes
This is evidently a backtracking problem, as we're trying to build all of the possible
sets of strings with a certain constraint; in this case, the number of parentheses.
* Solution
Written in Go.

To build a valid set of parentheses as the problem suggests, there are two things to consider:
- the number of open parentheses is equal to the number of closed ones
- a closed parentheses can be only added after at least one open parentheses exists.
 
The process ends up looking something along this route:
- count the number of open and closed parentheses in current string
- if we've closed all /n/ pairs of parentheses, add it to the solutions
- if we have more open parentheses than closed ones, we'll need to close one, so recurse with
  the added closed parentheses
- also, if we have less open parentheses than the required number, recurse with an added open parentheses

Then, you just need the initial call, which is just an empty string. The defer is necessary
due to the =solutionSet= variable not being reset between Leetcode solution calls.

#+BEGIN_SRC go :tangle generateParentheses.go
import "strings"
import "fmt"

var solutionSet []string

func backtrack(n int, current string) {
    numberOpen := strings.Count(current, "(");
    numberClosed := strings.Count(current, ")");
    if numberClosed == n {
        solutionSet = append(solutionSet, current);
    } else {
        if numberOpen > numberClosed {
            backtrack(n, current + ")");
        }
        if numberOpen < n {
            backtrack(n, current + "(");
        }
    }
}

func generateParenthesis(n int) []string {
    backtrack(n, "");
    defer func(){solutionSet = nil}();
    return solutionSet;
}

func main() {
  fmt.Println(generateParenthesis(3));
}
#+END_SRC

#+RESULTS:
: [()()() ()(()) (())() (()()) ((()))]

* Related Problems
